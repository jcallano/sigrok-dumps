-------------------------------------------------------------------------------
Pjon Padded Jittering Data Link PJDL V4.1 (SOFTWAREBITBANG - SWBB)
-------------------------------------------------------------------------------

This is the capture of the traffic between two stm32f103c (blue pill) programmed using the library of Pjon available on Platformio.io using arduino framework under the example of Pjon/ARDUINO/Local/SoftwareBitBang/SendAndRecive/device1 and device2.

Details:
https://www.pjon.org/PJDL-specification-v4.1.php
https://www.pjon.org/SoftwareBitBang.php

Logic analyzer setup
--------------------

The logic analyzer used was a No name LHT00SU1: It is a clone of the CWAV USBee AX-Pro
   
Pulseview was used to capture the trace with the following parameters:

  - sample rate: 4 MHz
  - samples: 5 M
  

capturadigital.sr

  Channel      PB9 pin
  ------------------------
   D1        Data line

Digital Dump captured on digital channel 1  

Device 1 has bus address 44 and Device 2 has bus address 45.

The device 1 send the byte "B" to device 2.
The device 2 receive the data, and check for the "B" payload, blink a led and then respond sending a message with the same "B" Payload to device 1.
The speed mode used is mode 1:
MODE	Data bit duration	Padding bit duration	Pad-data ratio	Bandwidth	Range
1	   44	     		  	116		 2.636	1.95kB/s - 15625Bd	2000m

The protocol is software implemented in the micro controller and the micro controller need to listen actively to be able to catch the communication. In this example the time set for communication listening is 500ms.

We can see 3 types of data frames in this dump, isolated in the following files:


pjdllht.sr
---------

captured with analog channel 0 and converted to logical levels to avoid spurious spikes appearing on digital channels.

  Channel      PB9 pin
  ------------------------
   A0        Data line


The protocol is software implemented in the micro controller and the micro controller need to listen actively to be able to catch the communication. In this example the time set for communication listening is 500ms.

We can see 3 types of data frames in this dump, isolated in the following files:

decoder.sr
Timing and markers set to manual decode the frame. In file decode1.jpg you can se the Data frame Components.
Device 45 is sending "B" to Device 44 with the configuration header with AKC bit set and Tx ID bit set

dataframe2.sr
Raw data of Device 44is sending "B" to Device 45 with the configuration header with AKC bit set and Tx ID bit set

failedack.sr

In this Data frame we can evidence the lack of ack of the receiving device. In this case after a preconfigured waiting time the message is re-schedule for sending. This happens in this example probably because in that moment the receiving device was not listening when communication was started.

dump1.sr
Bus id tx  rx = 0.0.0.1 sender id 44 reciver id 45 payload = "01234567890"
timing is not correct due missconfiguration of library pad 112uS bit 41uS

dump2.sr
sender id 44 reciver id 45 payload = "01"
timing is not correct due missconfiguration of library pad 112uS bit 41uS

dump3.sr
FRAME INIT|ID 44| HEADER 00110111 |LENGTH 0x27 | CRC8 0x45 | BUS ID 0.0.0.1 |BUS IDtx 0.0.0.1 |IDtx 45 |PORT 8001| DATA 0to9 0to9  |  CRC32  4f74f218 | ACK 6

dump4.sr is has the following information:
FRAME INIT|ID 44| HEADER 00110111 |LENGTH 0x27 | CRC8  | BUS ID 255.255.255.255 |BUS IDtx 255.255.255.255 |IDtx 45 |PORT 8001| DATA 0xab 20 times  |  CRC32  | ACK 6

dump5.sr is has the following information:
FRAME INIT|ID 44| HEADER 00110111 |LENGTH 0x27 | CRC8 | BUS ID 255.255.255.255 |BUS IDtx 255.255.255.255 |IDtx 45 |PORT 43691| DATA 0xab 20 times  |  CRC32   | ACK 6
